<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="CookieConsent.ConfigurationSheet" locale="">
  <web>CookieConsent</web>
  <name>ConfigurationSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1531379637000</creationDate>
  <parent>CookieConsent.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1673535688000</date>
  <contentUpdateDate>1673535688000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#set ($settingsDoc = $xwiki.getDocument('CookieConsent.WebHome'))
$services.localization.render('cookieConsent.administration.description.intro')
* $services.localization.render('cookieConsent.administration.description.necessary')
* $services.localization.render('cookieConsent.administration.description.preferences')
* $services.localization.render('cookieConsent.administration.description.statistics')
* $services.localization.render('cookieConsent.administration.description.marketing')

; $services.localization.render('cookieConsent.crtUser.hasAccepted')
: {{gdprSettings /}}

==== $services.localization.render('cookieConsent.administration.trigger.heading') ====

  $services.localization.render('cookieConsent.administration.trigger.content')

  {{code language="none"}}{{html}}&lt;a href="#" id='ResetCookies'&gt;$services.localization.render('cookieConsent.administration.trigger.linklabel')&lt;/a&gt;{{/html}}{{/code}}

  **$services.localization.render('cookieConsent.administration.trigger.example'):** {{html}}&lt;a href="#" id='ResetCookies'&gt;$services.localization.render('cookieConsent.administration.trigger.linklabel')&lt;/a&gt;{{/html}}##
$xwiki.jsfx.use('uicomponents/widgets/colorpicker/procolor.js', true)
$xwiki.jsx.use('CookieConsent.ConfigurationSheet')
#if($hasAdmin)
  ####
  ##Language objects management start
  ##
  #set ($defaultLanguage = $xwiki.getDocument('XWiki.XWikiPreferences').getObject('XWiki.XWikiPreferences').getProperty('default_language').value)
  #set ($supportedLang = $xwiki.getDocument('XWiki.XWikiPreferences').getObject('XWiki.XWikiPreferences').getProperty('languages').value)
  ##
  #set ($settingsDocObjects = $settingsDoc.getObjects('CookieConsent.ConfigurationClass'))
  #set ($crtLangObject = $settingsDoc.getObject('CookieConsent.ConfigurationClass', 'lang', "${xcontext.locale}"))
  #if($settingsDocObjects.size() == 1 &amp;&amp; "$!{crtLangObject}" == '')
    #set ($obj = $settingsDoc.getObject('CookieConsent.ConfigurationClass'))
    #set ($discard = $obj.set('lang', "${xcontext.locale}"))
    #set ($discard = $settingsDoc.save())
  #end
  #if($settingsDocObjects.size() &lt; $supportedLang.split(',').size())
    #foreach($lang in $supportedLang.split(','))
      #set ($originalObject = $settingsDoc.getObject('CookieConsent.ConfigurationClass','lang',$defaultLanguage))
      #set ($langObject = $settingsDoc.getObject('CookieConsent.ConfigurationClass','lang',$lang))
      #if(!$langObject)
        #set($newObject = $settingsDoc.newObject('CookieConsent.ConfigurationClass'))
        #foreach($prop in $originalObject.getProperties())
          #if($prop.name != 'lang')
            #set($discard = $newObject.set($prop.name, $originalObject.getProperty($prop.name).value))
          #end
        #end
        #set($discard = $newObject.set('lang', $lang))
        #set($discard = $settingsDoc.save())
      #end
    #end
  #end
  #foreach($object in $settingsDocObjects)
    #if(!$supportedLang.split(',').contains($object.getProperty('lang').value))
      #set($discard = $settingsDoc.removeObject($object))
      #set($discard = $settingsDoc.save())
    #end
  #end
  #if($supportedLang.split(',').size()&gt;1)
  **$services.localization.render('XWiki.XWikiPreferences_languages'):** ##
    #foreach($l in $supportedLang.split(','))
      #if ("${xcontext.locale}" == "${l}")
        **[[$l&gt;&gt;||queryString="section=GDPR Cookie Consent Setup&amp;language=${l}"]]** ##
      #else
        [[$l&gt;&gt;||queryString="section=GDPR Cookie Consent Setup&amp;language=${l}"]] ##
      #end
    #end


  #end
  ##Language objects management end
  ####
  #set($crtLangObj = $settingsDoc.getObject('CookieConsent.ConfigurationClass', 'lang', "${xcontext.locale}"))
  #set($class = $crtLangObj.xWikiClass)
  {{html wiki=true}}
  ##Ensure the save URL has the corect format
  #if($settingsDoc.getURL('save').contains('http'))
    #set($saveURL = $settingsDoc.getURL('save').replace('https://','').replace('http://',''))
    #set($saveURL = $saveURL.replace($saveURL.split('/')[0],''))
  #else
    #set($saveURL = $settingsDoc.getURL('save'))
  #end
  &lt;form method="post" action="${saveURL}" class="xform"&gt;&lt;fieldset&gt;
  == $services.localization.render('cookieConsent.administration.heading.general') ==
  #foreach($property in $class.properties)
    #if($property.name == 'buttonText')
      == $services.localization.render('cookieConsent.administration.heading.configurableText') ==
    #elseif($property.name == 'preferencesScripts')
      == $services.localization.render('cookieConsent.administration.heading.trackers') ==
    #elseif($property.name == 'necessaryLabel')
      == $services.localization.render('cookieConsent.administration.heading.labels') ==
    #end
    ; $property.translatedPrettyName
    #if($property.name != 'lang')
      #if($property.name == 'backgroundColor' || $property.name == 'foregroundColor')
      (% class='clrPicker' %)(((
      : $doc.display($property.getName(),'edit',$crtLangObj)
      )))
      #else
        : $doc.display($property.getName(),'edit',$crtLangObj)
      #end
    #else
      : $crtLangObj.getProperty('lang').value
    #end
  #end
  &lt;/fieldset&gt;
  &lt;input type="hidden" id='secToken' name="form_token"&gt;
  #if($xcontext.action != 'edit')
    &lt;input id='saveButton' class="btn btn-primary" type="submit" name="action_saveandcontinue" title="Alt+Shift+S" value="$services.localization.render('admin.save')"&gt;
  #end
  &lt;/form&gt;
  {{/html}}

#end
{{/velocity}}</content>
  <object>
    <name>CookieConsent.ConfigurationSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>faaf0b5e-373a-4058-8896-4a88316e7490</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe("dom:loaded", function() {
  document.getElementsByClassName('clrPicker')[0].getElementsByTagName('input')[0].addClassName('procolor');
  document.getElementsByClassName('clrPicker')[1].getElementsByTagName('input')[0].addClassName('procolor');
});
require(['xwiki-meta'], function (xm) {
  $('secToken').setValue(xm.form_token);         // get the current CSRF token
});
$('saveButton').observe('click', function () {
  window.location.reload('true');
});</code>
    </property>
    <property>
      <name>ProColor class</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
